"use strict";
// tslint:disable
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * PetsApi - axios parameter creator
 * @export
 */
exports.PetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(options = {}) {
            const localVarPath = `/pets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List all pets
         * @param {number} [limit] How many items to return at one time (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(limit, options = {}) {
            const localVarPath = `/pets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId, options = {}) {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new base_1.RequiredError('petId', 'Required parameter petId was null or undefined when calling showPetById.');
            }
            const localVarPath = `/pets/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PetsApi - functional programming interface
 * @export
 */
exports.PetsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(options) {
            const localVarAxiosArgs = exports.PetsApiAxiosParamCreator(configuration).createPets(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List all pets
         * @param {number} [limit] How many items to return at one time (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(limit, options) {
            const localVarAxiosArgs = exports.PetsApiAxiosParamCreator(configuration).listPets(limit, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId, options) {
            const localVarAxiosArgs = exports.PetsApiAxiosParamCreator(configuration).showPetById(petId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * PetsApi - factory interface
 * @export
 */
exports.PetsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(options) {
            return exports.PetsApiFp(configuration).createPets(options)(axios, basePath);
        },
        /**
         *
         * @summary List all pets
         * @param {number} [limit] How many items to return at one time (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(limit, options) {
            return exports.PetsApiFp(configuration).listPets(limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId, options) {
            return exports.PetsApiFp(configuration).showPetById(petId, options)(axios, basePath);
        },
    };
};
/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
class PetsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create a pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    createPets(options) {
        return exports.PetsApiFp(this.configuration).createPets(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary List all pets
     * @param {number} [limit] How many items to return at one time (max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    listPets(limit, options) {
        return exports.PetsApiFp(this.configuration).listPets(limit, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Info for a specific pet
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    showPetById(petId, options) {
        return exports.PetsApiFp(this.configuration).showPetById(petId, options)(this.axios, this.basePath);
    }
}
exports.PetsApi = PetsApi;
